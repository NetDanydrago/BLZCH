@page "/moderator"
@inject NavigationManager NavigationManager
@implements IDisposable
<h3>Chat Moderador</h3>


@if (!IsSingIn)
{
    <div class="form-group">
        <label>Usuario:</label>
        <input @bind="NickName" size="50" />
        <button @onclick="SingInModerator">
            Sing
        </button>
        <div>
            @SingInMessage
        </div>
    </div>
}
else
{
    <ul>
        @foreach (var Q in Questions)
        {

            <li>
                <div>
                    @Q.ChatUser.NickName
                </div>
                @Q.Question
                <button @onclick=" async () =>
                                   { await ChangeStateAnswer(StateAnswer.Answering, Q);
                                       Question = Q;
                                       IsShow = true;
                                   }"
                        disabled="@(Q.IsAnswered == StateAnswer.Answering)">
                    Responder
                </button>
            </li>
        }
    </ul>

    <ModalDialog Show="IsShow" Close="async () => {
                    await ChangeStateAnswer(StateAnswer.NotAnswered, Question);
                    IsShow = false;}" >
        <Body>
            <div class="form-group">
                <label>Respuesta:</label>
                <input @bind="MessageInput" size="50" />
            </div>
        </Body>
        <Footer>
            <button @onclick="() => SendAnswer(Question)" disabled="@(!IsConnected)">
                Enviar
            </button>
        </Footer>
    </ModalDialog>
}
@code {
    bool IsSingIn = false;
    bool IsShow = false;
    string NickName;
    string MessageInput;
    QuestionUsers Question;
    private List<QuestionUsers> Questions = new List<QuestionUsers>();
    List<String> Users = new List<string>();
    string SingInMessage;


    HubConnection HubConnection;

    protected override async Task OnInitializedAsync()
    {
        HubConnection = new HubConnectionBuilder()
        .WithUrl(NavigationManager.ToAbsoluteUri("/chathub"))
        .Build();
        HubConnection.On(nameof(NotifyQuestions), NotifyQuestions);
        await HubConnection.StartAsync();
    }

    async Task SendAnswer(QuestionUsers questionUsers)
    {
        await HubConnection.SendAsync("SendMessageModerator", MessageInput, questionUsers);
        IsShow = false;
    }


    async Task ChangeStateAnswer(StateAnswer state, QuestionUsers questionUser)
    {
        await HubConnection.SendAsync(nameof(ChangeStateAnswer), questionUser,state);
    }


    async Task NotifyQuestions()
    {
        Questions =
        await HubConnection.InvokeAsync<List<QuestionUsers>>("GetQuestions");
        this.StateHasChanged();
    }


    async Task SingInModerator()
    {
        var Result = await HubConnection.InvokeAsync<bool>(nameof(SingInModerator), NickName);
        if (Result)
        {
            SingInMessage = "!Usuario registrado";
            IsSingIn = true;
            Users = await HubConnection.InvokeAsync<List<string>>("GetUserList");
        }
        else
        {
            SingInMessage = "El NickName ya esta siendo utilizado.";
        }
    }

    public bool IsConnected =>
        HubConnection.State == HubConnectionState.Connected;

    public void Dispose()
    {
        _ = HubConnection.DisposeAsync();
    }
}
