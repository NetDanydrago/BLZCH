@page "/moderator"
@inject NavigationManager NavigationManager
@implements IDisposable
<h3>InitialChat</h3>


@if (!IsSingIn)
{
    <div class="form-group">
        <label>Usuario:</label>
        <input @bind="NickName" size="50" />
        <button @onclick="SingInModerator">
            Sing
        </button>
        <div>
            @SingInMessage
        </div>
    </div>
}
else
{
    <ul>
        @foreach (var Q in Questions)
        {

            <li>
                <div>
                    @Q.ChatUser.NickName
                </div>
                @Q.Question
                <button @onclick="() => IsShow = true">
                    Responder
                </button>
            </li>
        }
    </ul>
    @if (IsShow)
    {
        <div>

        </div>
    }
}
@code {
    bool IsSingIn = false;
    string NickName;
    string MessageInput;
    bool IsShow = false;
    private List<string> Messages = new List<string>();
    private List<QuestionUsers> Questions = new List<QuestionUsers>();
    List<String> Users = new List<string>();
    string SingInMessage;


    HubConnection HubConnection;

    protected override async Task OnInitializedAsync()
    {
        HubConnection = new HubConnectionBuilder()
        .WithUrl(NavigationManager.ToAbsoluteUri("/chathub"))
        .Build();

        HubConnection.On<string, string>("ReceiveMessage", (user, message) =>
        {
            Messages.Add($"{user}: {message}");
            StateHasChanged();
        });
        HubConnection.On(nameof(NotifyQuestions), NotifyQuestions);
        HubConnection.On<string>(nameof(UserConnected), UserConnected);
        HubConnection.On<string>(nameof(UserDisconnected), UserDisconnected);
        await HubConnection.StartAsync();
    }
    Task Send() => HubConnection.SendAsync("SendMessage", MessageInput);


    async Task NotifyQuestions()
    {
        Questions =
        await HubConnection.InvokeAsync<List<QuestionUsers>>("GetQuestions");
        this.StateHasChanged();
    }


    async Task SingInModerator()
    {
        var Result = await HubConnection.InvokeAsync<bool>(nameof(SingInModerator), NickName);
        if (Result)
        {
            SingInMessage = "!Usuario registrado";
            IsSingIn = true;
            Users = await HubConnection.InvokeAsync<List<string>>("GetUserList");
        }
        else
        {
            SingInMessage = "El NickName ya esta siendo utilizado.";
        }
    }

    public bool IsConnected =>
        HubConnection.State == HubConnectionState.Connected;


    void UserConnected(string user)
    {
        Users.Add(user);
        Messages.Add($"{user} se ha conectado.");
        StateHasChanged();
    }

    void UserDisconnected(string user)
    {
        Users.Remove(user);
        Messages.Add($"{user} se ha desconectado.");
        StateHasChanged();
    }

    public void Dispose()
    {
        _ = HubConnection.DisposeAsync();
    }
}
