@page "/chat"
@inject NavigationManager NavigationManager
@implements IDisposable
<h3>Chat Usuarios</h3>

@if (!IsSingIn)
{
    <div class="form-group">
        <label>Ingresa tu nombre de usuario:</label>
        <input @bind="NickName" size="50" />
        <button @onclick="SingIn">
            Ingresar
        </button>
        <div>
            @SingInMessage
        </div>
    </div>
}
else
{
<div class="form-group popup">
    <label>Pregunta:</label>
    <span class="popuptext @ShowPopup" id="myPopup">
        Tu pregunta ha sido enviada,
        <br />
        sera respondidad en unos momentos!
    </span>
    <input @bind="MessageInput" size="50" />
    <button @onclick="Send" disabled="@(!IsConnected)">
        Enviar
    </button>
</div>

    <hr />
    <div>
        <div>
            Area de Preguntas respondidas por los moderadores.
        </div>
        <hr />
        <ul>
            @foreach (var message in Messages)
            {
                <li>
                    @message.UserModerator<br />
                    Pregunta: @message.Question <br/>
                    Respuesta: @message.Answer
                </li>
            }
        </ul>
    </div>
}



@code {

    bool IsSingIn = false;
    string ShowPopup;
    string NickName;
    string MessageInput;
    private List<Questions> Messages = new List<Questions>();
    List<string> Users = new List<string>();
    string SingInMessage;


    HubConnection HubConnection;

    protected override async Task OnInitializedAsync()
    {
        HubConnection = new HubConnectionBuilder()
        .WithUrl(NavigationManager.ToAbsoluteUri("/chathub"))
        .Build();

        HubConnection.On<Questions>("ReceiveMessage", (message) =>
        {
            Messages.Add(message);
            StateHasChanged();
        });
        HubConnection.On<string>(nameof(UserConnected), UserConnected);
        HubConnection.On<string>(nameof(UserDisconnected), UserDisconnected);
        await HubConnection.StartAsync();
    }


    async Task Send()
    {
        await HubConnection.SendAsync("SendQuestion", MessageInput);
        MessageInput = string.Empty;
        ShowPopup = "show";
        StateHasChanged();
        await Task.Delay(3000);
        ShowPopup = string.Empty;
    }


    async Task SingIn()
    {
        var Result = await HubConnection.InvokeAsync<bool>(nameof(SingIn), NickName);
        if (Result)
        {
            SingInMessage = "!Usuario registrado";
            Users = await HubConnection.InvokeAsync<List<string>>("GetUserList");
            IsSingIn = true;
        }
        else
        {
            SingInMessage = "El NickName ya esta siendo utilizado.";
        }
    }

    public bool IsConnected =>
        HubConnection.State == HubConnectionState.Connected;


    void UserConnected(string user)
    {
        Users.Add(user);
        StateHasChanged();
    }

    void UserDisconnected(string user)
    {
        Users.Remove(user);
        StateHasChanged();
    }

    public void Dispose()
    {
        _ = HubConnection.DisposeAsync();
    }
}
